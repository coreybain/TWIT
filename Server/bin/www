#!/usr/bin/env node

//MARK: -- Variables
var startup = true

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Server:server');
var http = require('http');
var twitServerSync = require('../twit/twitServerSync');
var firebaseServerSync = require('../firebase/firebaseServerSync');
var showArray = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  //This is used to sync data from the twit servers to Spiritdevs Firebase account.

  /*** This is where we start setting up the server ***/
  setupTwitServer();
  //runTwitServer();
  //firebaseServerSync.deletefirebase();
}

function setupTwitServer() {
    console.log('Hello Corey -- Setup of TWiT server beginning... Please Wait.');
    downloadAllEpisodes();
}

function runTwitServer() {
    console.log('Hello Corey -- Starting TWiT server... Please wait for the updating to begin...');
    downloadActiveEpisodes();
}

function downloadActiveEpisodes() {
  //Check show listing fist
  twitServerSync.twitShowConnect(function(shows) {
      console.log('Server Started');
      console.log(shows.length)
      for (var show in shows) {
        if ((shows[show]['active']) == true) {
          console.log((shows[show]['id']));
          showArray.push((shows[show]['id']));
        }
      }
      syncTwitEpisodes(true);
      function syncTwitEpisodesTimer() {
        syncTwitEpisodes(true);
      }
      //var activeTwitEpisodeTimer = setInterval(syncTwitEpisodesTimer, (10000 /*(1000 * 60) * 60*/ ))
  });
}

function downloadAllEpisodes() {
  //Check show listing fist
  twitServerSync.twitShowConnect(function(shows) {
      console.log('Server Started');
      console.log('This is how many shows: ' + shows.length)
      for (var show in shows) {
        showArray.push((shows[show]['id']));
      }
      syncTwitEpisodes(false);
  });
}
var twitEpisodeTimer

function syncTwitEpisodes(active) {
  var pageNumber = 1;
  var showNumber = 0;
  var showID = 0;
  console.log('here')
  twitEpisodes();

  function twitEpisodes() {
    clearInterval(twitEpisodeTimer);
  if (showArray[showNumber] != null) {
    showID = showArray[showNumber];
  } else {
    console.log('End of show array --> Stopping download');
    clearInterval(twitEpisodeTimer);
  }

  console.log('showID: ' + showID);
  if (active != true) {
    twitServerSync.twitConnect("episodes", showID, (pageNumber++), function(result) {

      // console.log(result['episodes']);
      if (result == null) {
          showNumber++;
          pageNumber = 1;
          console.log('There was an error downloading from the twit server and no information was returned to be parsed');
          twitEpisodeTimer = setInterval(twitEpisodes,15000);
      } else {
        if (result['episodes'] == "") {
          showNumber++;
          pageNumber = 1;
          console.log('Show has finished downloading all episodes');
          twitEpisodeTimer = setInterval(twitEpisodes,15000);
        } else {
          firebaseServerSync.firebaseEpisodeSync("episodes", showID, result, function(finished) {

            if (finished == null) {
                console.log('Something failed in uploading the episodes');
                twitEpisodeTimer = setInterval(twitEpisodes,15000);
            } else {
              if (finished == true) {
                console.log('Show has uploaded successfully');
                twitEpisodeTimer = setInterval(twitEpisodes,15000);
              }
            }
          }
          )}
    }});
  } else {
    twitServerSync.twitConnect("episodes", showID, (pageNumber), function(result) {

      // console.log(result['episodes']);
      if (result == null) {
          showNumber++;
          console.log('There was an error downloading from the twit server and no information was returned to be parsed');
      } else {
        if (result['episodes'] == "") {
          showNumber++;
          console.log('Show has finished downloading all episodes');
        } else {
          showNumber++;
          firebaseServerSync.firebaseEpisodeSync("episodes", showID, result);
          console.log('Show has been updated');
        }
    }});
  }
  }
  //var twitEpisodeTimer = setInterval(twitEpisodes,40000);
}
