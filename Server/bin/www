#!/usr/bin/env node

var firebase = require("firebase");

firebase.initializeApp({
  databaseURL: "https://twit-mobile.firebaseio.com/",
  serviceAccount: "./TWIT-MOBILE-febd239fd2d6.json"
});

//MARK: -- Variables
var showsDict = {}
var db = firebase.database();
var ref = db.ref("categories");
var episodesRef = db.ref("episodes");
var serverCount = 0
var twitCount = 0
var startup = true

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  var pageNumber = 0
  var request = require('request');
  var firstBool = false
  var testing = true
  console.log("HELLO")
  var requestLoop = setInterval(function(){
    var urlBase = ""

    console.log('TEST!');
      var urlBase = "https://twit.tv/api/v1.0/episodes?page=" + (pageNumber + 1) + "&filter%5Bshows%5D=1637"
    request({
        url: urlBase,
        method: "GET",
        headers: {
          'Accept': 'application/json',
          'app-id': '3e742ac7',
          'app-key': '2a6557daace8c6524cc82af2e718fbcc'
        }
    },function(error, response, body){
        if(!error && response.statusCode == 200){

          var respons = JSON.parse(body);
          var shows = respons['episodes'];

          twitCount = respons['count'];
          console.log(urlBase)

          episodesRef.child('count').on("value", function(snapshot) {
            if (snapshot.exists()) {
              serverCount = snapshot.val().count
                console.log('there it is -- it exists')
            } else {
              serverCount = 0
                console.log('didnt exist')
            }
            if (testing) {
              console.log('IT IS BIGGER')
              episodesRef.child('count').set({
                count: respons['count']
              });
              for (var show in shows) {
                  episodesRef.child('1637').child(shows[show]['id']).set({

                    id: shows[show]['id'],
                    label: shows[show]['label'],
                    showNotes: shows[show]['showNotes'],
                    cleanPath: shows[show]['cleanPath'],
                    episodeNumber: shows[show]['episodeNumber'],
                    teaser: shows[show]['teaser'],
                    airingDate: shows[show]['airingDate'],
                    featured: shows[show]['featured'],
                    showNotesFooter: shows[show]['showNotesFooter'],
                    created: shows[show]['created'],
                    changed: shows[show]['changed']
                  });
              };
            } else {
              console.log('IT IS the same or smaller')
            }
          }, function (errorObject) {
            console.log("The read failed: " + errorObject.code);
          });

        }else{
            console.log('error' + response.statusCode);
        }
    });
    pageNumber++
  }, 15000);
}
